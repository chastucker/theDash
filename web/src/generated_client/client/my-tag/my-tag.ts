/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * The Dash Backend
 * The Dash Backend API
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { GetTestMe200 } from "../../models";

/**
 * A test route for me
 */
export const getTestMe = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetTestMe200>> => {
  return axios.get(`http://localhost:4000/test-me`, options);
};

export const getGetTestMeQueryKey = () => {
  return [`http://localhost:4000/test-me`] as const;
};

export const getGetTestMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestMe>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTestMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestMe>>> = ({
    signal,
  }) => getTestMe({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTestMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTestMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTestMe>>
>;
export type GetTestMeQueryError = AxiosError<unknown>;

export const useGetTestMe = <
  TData = Awaited<ReturnType<typeof getTestMe>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTestMe>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
