/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * The Dash Backend
 * The Dash Backend API
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type {
  GetGetPatients200Item,
  PostAddPatient200,
  PostAddPatientBody,
  PostRemovePatientBody,
  PutUpdatePatient200,
  PutUpdatePatientBody,
} from "../../models";
import { useCustomInstance } from "../../../utils/axiosInstance";

/**
 * Add a patient
 */
export const usePostAddPatientHook = () => {
  const postAddPatient = useCustomInstance<PostAddPatient200>();

  return useCallback(
    (postAddPatientBody: PostAddPatientBody) => {
      return postAddPatient({
        url: `http://localhost:4000/add-patient`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postAddPatientBody,
      });
    },
    [postAddPatient],
  );
};

export const usePostAddPatientMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostAddPatientHook>>>,
    TError,
    { data: PostAddPatientBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostAddPatientHook>>>,
  TError,
  { data: PostAddPatientBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postAddPatient = usePostAddPatientHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostAddPatientHook>>>,
    { data: PostAddPatientBody }
  > = (props) => {
    const { data } = props ?? {};

    return postAddPatient(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAddPatientMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostAddPatientHook>>>
>;
export type PostAddPatientMutationBody = PostAddPatientBody;
export type PostAddPatientMutationError = string;

export const usePostAddPatient = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostAddPatientHook>>>,
    TError,
    { data: PostAddPatientBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostAddPatientHook>>>,
  TError,
  { data: PostAddPatientBody },
  TContext
> => {
  const mutationOptions = usePostAddPatientMutationOptions(options);

  return useMutation(mutationOptions);
};
export const useGetGetPatientsHook = () => {
  const getGetPatients = useCustomInstance<GetGetPatients200Item[]>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getGetPatients({
        url: `http://localhost:4000/get-patients`,
        method: "GET",
        signal,
      });
    },
    [getGetPatients],
  );
};

export const getGetGetPatientsQueryKey = () => {
  return [`http://localhost:4000/get-patients`] as const;
};

export const useGetGetPatientsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGetPatientsQueryKey();

  const getGetPatients = useGetGetPatientsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>
  > = ({ signal }) => getGetPatients(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGetPatientsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>
>;
export type GetGetPatientsQueryError = unknown;

export const useGetGetPatients = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetGetPatientsHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetGetPatientsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const usePostRemovePatientHook = () => {
  const postRemovePatient = useCustomInstance<unknown>();

  return useCallback(
    (postRemovePatientBody: PostRemovePatientBody) => {
      return postRemovePatient({
        url: `http://localhost:4000/remove-patient`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: postRemovePatientBody,
      });
    },
    [postRemovePatient],
  );
};

export const usePostRemovePatientMutationOptions = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostRemovePatientHook>>>,
    TError,
    { data: PostRemovePatientBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostRemovePatientHook>>>,
  TError,
  { data: PostRemovePatientBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postRemovePatient = usePostRemovePatientHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostRemovePatientHook>>>,
    { data: PostRemovePatientBody }
  > = (props) => {
    const { data } = props ?? {};

    return postRemovePatient(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRemovePatientMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostRemovePatientHook>>>
>;
export type PostRemovePatientMutationBody = PostRemovePatientBody;
export type PostRemovePatientMutationError = string;

export const usePostRemovePatient = <
  TError = string,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostRemovePatientHook>>>,
    TError,
    { data: PostRemovePatientBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostRemovePatientHook>>>,
  TError,
  { data: PostRemovePatientBody },
  TContext
> => {
  const mutationOptions = usePostRemovePatientMutationOptions(options);

  return useMutation(mutationOptions);
};
export const usePutUpdatePatientHook = () => {
  const putUpdatePatient = useCustomInstance<PutUpdatePatient200>();

  return useCallback(
    (putUpdatePatientBody: PutUpdatePatientBody) => {
      return putUpdatePatient({
        url: `http://localhost:4000/update-patient`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: putUpdatePatientBody,
      });
    },
    [putUpdatePatient],
  );
};

export const usePutUpdatePatientMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePutUpdatePatientHook>>>,
    TError,
    { data: PutUpdatePatientBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePutUpdatePatientHook>>>,
  TError,
  { data: PutUpdatePatientBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const putUpdatePatient = usePutUpdatePatientHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePutUpdatePatientHook>>>,
    { data: PutUpdatePatientBody }
  > = (props) => {
    const { data } = props ?? {};

    return putUpdatePatient(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutUpdatePatientMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePutUpdatePatientHook>>>
>;
export type PutUpdatePatientMutationBody = PutUpdatePatientBody;
export type PutUpdatePatientMutationError = unknown;

export const usePutUpdatePatient = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePutUpdatePatientHook>>>,
    TError,
    { data: PutUpdatePatientBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePutUpdatePatientHook>>>,
  TError,
  { data: PutUpdatePatientBody },
  TContext
> => {
  const mutationOptions = usePutUpdatePatientMutationOptions(options);

  return useMutation(mutationOptions);
};
